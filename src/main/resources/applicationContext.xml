<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:websocket="http://www.springframework.org/schema/websocket"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/websocket 
	    http://www.springframework.org/schema/websocket/spring-websocket.xsd"
	default-lazy-init="true">

	<context:component-scan base-package="com.fish" />

	<!-- 配置文件加载 -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:/project.properties</value>
			</list>
		</property>
	</bean>

	 <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
	      <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
	      <property name="url" value="jdbc:mysql://${jdbc.host}:3306/${jdbc.database}?useUnicode=true&amp;characterEncoding=utf-8&amp;zeroDateTimeBehavior=convertToNull"/>
	      <property name="username" value="${jdbc.username}"/>
	      <property name="password" value="${jdbc.password}"/>
		 <!-- 配置初始化大小、最小、最大 -->
		   <property name="initialSize" value="3" />
		   <property name="minIdle" value="3" />
		   <property name="maxActive" value="10" />
		   <!-- 配置获取连接等待超时的时间 -->
		   <property name="maxWait" value="60000" />
		   <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		   <property name="timeBetweenEvictionRunsMillis" value="60000" />
		   <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		   <property name="minEvictableIdleTimeMillis" value="300000" />
		   <property name="validationQuery" value="SELECT 'x'" />
		   <property name="testWhileIdle" value="true" />
		   <property name="testOnBorrow" value="false" />
		   <property name="testOnReturn" value="false" />
		   <!-- 配置监控统计拦截的filters -->
		   <property name="filters" value="stat" />
		   <property name="connectionInitSqls" value="set names utf8mb4;"/>
	</bean>
       

	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
	</bean>
	
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>

	<bean id="transactionInterceptor"
		class="org.springframework.transaction.interceptor.TransactionInterceptor">
		<property name="transactionManager" ref="transactionManager" />
		<property name="transactionAttributes">
			<props>
				<!-- 读操作 -->
				<prop key="query*">PROPAGATION_SUPPORTS,-Exception</prop>
				<prop key="find*">PROPAGATION_SUPPORTS,-Exception</prop>
				<prop key="get*">PROPAGATION_SUPPORTS,-Exception</prop>
				<prop key="load*">PROPAGATION_SUPPORTS,-Exception</prop>
				<prop key="count*">PROPAGATION_SUPPORTS,-Exception</prop>
				<prop key="list*">PROPAGATION_SUPPORTS,-Exception</prop>
				<prop key="check*">PROPAGATION_SUPPORTS,-Exception</prop>
				<prop key="qry*">PROPAGATION_SUPPORTS,-Exception</prop>
				<prop key="select*">PROPAGATION_SUPPORTS,-Exception</prop>
				<!-- 写操作 -->
				<prop key="save*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="del*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="add*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="upd*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="insert*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="creat*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="edit*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="remove*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="gain*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="onlineDb*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="trxqry*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="credit*">PROPAGATION_REQUIRED,-Exception</prop>
				<prop key="debit*">PROPAGATION_REQUIRED,-Exception</prop>
				
				<prop key="*">PROPAGATION_SUPPORTS,-Exception</prop>

			</props>
		</property>
	</bean>
	


	<bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxIdle" value="${redis.maxIdle}" />
		<property name="maxTotal" value="${redis.maxActive}" />
		<property name="maxWaitMillis" value="${redis.maxWait}" />
		<property name="testOnBorrow" value="${redis.testOnBorrow}" />
	</bean>

	<bean id="connectionFactory"
		class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
		p:host-name="${redis.host}" p:port="${redis.port}" p:pool-config-ref="poolConfig" />
	<bean id="stringSerializer"
		class="org.springframework.data.redis.serializer.StringRedisSerializer" />
	<!-- 开启事务，可以通过transcational注解控制 -->
	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
		<property name="connectionFactory" ref="connectionFactory" />
		<property name="keySerializer" ref="stringSerializer" />
		<property name="enableTransactionSupport" value="true" />
	</bean>

    
	<bean class="com.fish.server.websocket.WebSocketServer" scope="singleton"
		init-method="init" lazy-init="false">
	</bean>

	<bean id="userDataService" class="com.fish.server.websocket.service.UserDataService"
		scope="singleton" init-method="init" lazy-init="false">
		<property name="serviceId" value="10001" />
	</bean>

	<bean id="betDataService" class="com.fish.server.websocket.service.BetDataService"
		scope="singleton" init-method="init" lazy-init="false">
		<property name="serviceId" value="10000" />
	</bean>
	
	<bean id="taskTimeDataService" class="com.fish.server.websocket.service.TaskTimeDataService"
		scope="singleton" init-method="init" lazy-init="false">
		<property name="serviceId" value="10003" />
	</bean>
	
</beans>
